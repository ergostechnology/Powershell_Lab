{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro to PowerShell Lab","text":"<p>An ever evolving project to try to educate and inspire.</p>"},{"location":"#hosts","title":"Hosts","text":"<ul> <li>Mason Feuhrer</li> <li>Ryan McGough</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Visual Studio Code</li> <li>PowerShell Extension for Visual Studio Code</li> <li>Git for Windows</li> <li>A copy of this repository</li> </ul> <p>Need help? Click here</p>"},{"location":"#objectives","title":"Objectives","text":"<ol> <li>What is PowerShell?</li> <li>Why PowerShell?</li> <li>The ERGOS Way</li> <li>Understanding Cmdlets</li> <li>Hello Universe</li> <li>Users, Users, Users</li> <li>Conditionals</li> <li>Loops</li> <li>AI as a Tool</li> </ol>"},{"location":"lessons/01-what-is-powershell/","title":"What is PowerShell?","text":"<p>PowerShell is a task automation and configuration management program from Microsoft, consisting of a command-line shell and the associated scripting language. Initially a Windows component only, known as Windows PowerShell, it was made open-source and cross-platform on August 18, 2016, with the introduction of PowerShell Core. <sup>1</sup></p>"},{"location":"lessons/01-what-is-powershell/#cross-platform","title":"Cross Platform","text":"<ul> <li>Every Windows since 7 has PowerShell by default</li> <li>The introduction of PowerShell Core brought support for mac and linux OS</li> </ul>"},{"location":"lessons/01-what-is-powershell/#command-line-shell","title":"Command-Line Shell","text":"<ul> <li>Interactive Support</li> <li>Can test as you code</li> </ul>"},{"location":"lessons/01-what-is-powershell/#scripting-language","title":"Scripting Language","text":"<ul> <li>High Level Programming Language</li> <li>Doesn\u2019t need to be compiled</li> </ul>"},{"location":"lessons/01-what-is-powershell/#task-automation","title":"Task Automation","text":"<ul> <li>Scripts can contain logical operators and functions that when performed in order perform complex tasks</li> <li>Scripts ensure uniformity; actions are take the same way every time</li> <li>Using Script Parameters, scripts can make use of variables to scale</li> </ul> <ol> <li> <p>Wikipedia \u21a9</p> </li> </ol>"},{"location":"lessons/02-why-powershell/","title":"Why PowerShell?","text":""},{"location":"lessons/02-why-powershell/#its-already-there","title":"It\u2019s Already There","text":"<p>The overwhelming majority of the devices we support are Windows based. Windows comes with PowerShell installed by default. </p> <p>It\u2019s a no-brainer.</p>"},{"location":"lessons/02-why-powershell/#its-cross-platform","title":"It\u2019s Cross-Platform","text":"<p>While there is some nuance in the differences between PowerShell 5.1 and PowerShell 6+ (Core), in general you can write scripts on any platform, and likewise run them anywhere. </p>"},{"location":"lessons/02-why-powershell/#its-object-oriented","title":"It\u2019s Object Oriented","text":"<p>Not all shell environments are created equally. PowerShell is built around .NET objects, which allows for advanced programming techniques.</p>"},{"location":"lessons/03-the-ergos-way/","title":"The ERGOS Way","text":"<p>While there are some other rules we follow when writing scripts for RMM, these are some of the standards we try to adhere to in general when writing scripts. </p>"},{"location":"lessons/03-the-ergos-way/#scripting-standards","title":"Scripting Standards","text":"<ul> <li> <p>Scripts should be written legibly, so that any amateur should be able to read your code. This means not using shortened cmdlets. Visual Studio Code will identify scenarios where your commands can be expanded, follow the advice. </p> </li> <li> <p>Document your code in-line. Having a header block at the top that explains your goal is great, but if you are not adding commentary in the same spot where complex operations take place, you are doing a disservice to the rest of the team. </p> </li> <li> <p>If an external module is needed, be sure that any and all imports are placed at the top of the script, above script purpose and documentation. Additionally, your script should test that any imported module exists/functions before calling it inside of the script.</p> </li> <li> <p>All scripts that are to be run via RMM should have an echo, Write-Host, or similar with the statement \u201c[INFO] This script has been written by ERGOS Technology Partners for execution by RMM\u201d.</p> </li> </ul> <pre><code>Write-Output \"[INFO] This script has been written by ERGOS Technology Partners for execution by RMM.\"\n</code></pre> <ul> <li> <p>Commit messages should at least attempt relevance to the work performed. </p> </li> <li> <p>If your script is meant to perform an action, it should also check that the action was successful. </p> </li> <li> <p>Generative AI is a powerful tool, especially when used in the context of scripting and programming. However, AI is not without flaw. Do not run code generated by AI without an understanding of what the code is going to do.</p> </li> </ul>"},{"location":"lessons/04-understanding-cmdlets/","title":"What the Heck is a Cmdlet?","text":"<p>There are a few words and concepts that you will want to understand before we go on. Time for the boring stuff.</p>"},{"location":"lessons/04-understanding-cmdlets/#cmdlets","title":"cmdlets","text":"<p>cmdlets are the verbs or action names given to the operators in PowerShell. The start of any action will begin with a cmdlet.</p> <p>Try running the following cmdlet</p> <pre><code>Update-Help\n</code></pre> <p>Nice, you fell for it. Now the local PowerShell help files on your computer should be updated with the latest information. </p>"},{"location":"lessons/04-understanding-cmdlets/#variables","title":"variables","text":"<p>Variables are common in just about every programming language, and PowerShell is no different. </p> <p>PowerShell variables start with a dollar sign ($) and can contain strings, objects, numbers, arrays, even results of functions. </p> <pre><code>$name = \"Steve Buscemi\" # Sets the variable $name to the string \"Steve Buscemi\".\n\n$array = @('1','2','3') # Creates an array with the the values 1, 2, and 3.\n\n$processes = Get-Process # Stores a .NET object with the results of the Get-Process cmdlet into the variable $processes\n</code></pre>"},{"location":"lessons/04-understanding-cmdlets/#properties","title":"properties","text":"<p>Properties are the parts that define an object. For instance, a user account has properties like username, e-mail address, and password. </p> <p>In object oriented programming, a property can be addressed by calling and object, and then using dot (.) notation to select specific properties of an object.</p> <pre><code>$processes = Get-Process # Store the list of running processes\n\n$processes.ProcessName # List all of the process names found in the variable\n</code></pre>"},{"location":"lessons/04-understanding-cmdlets/#the-pipeline","title":"The Pipeline","text":"<p>PowerShell makes use of a concept called \u201cThe Pipeline\u201d, which is represented by using the <code>|</code> character. This allows for the results of one function to be \u201cpiped\u201d into the next cmdlet or function.</p> <p>For example, you can grab the list of running processes on a computer, and then format that data for easier viewing by using the Format-Table function:</p> <pre><code>Get-Process | Format-Table\n</code></pre> <p>This can be handy if you don\u2019t want to store something in a variable and then retrieve the data later.</p> <p>The pipeline also allows for continued used. Following our example above, you could pick just the first ten processes, and then format the output:</p> <pre><code>Get-Process | Select-Object -First 10 | Format-Table\n</code></pre>"},{"location":"lessons/05-hello-universe/","title":"Hello Universe!","text":"<pre><code>Write-Host \"Hello World.\"\n</code></pre> <p>That\u2019s it. </p> <p>It\u2019s the first thing you learn in most programming languages. \u201cHow do I print the words \u2018Hello World.\u2019 to the screen?\u201d. </p> <p>You could make it a little more complicated:</p> <pre><code>$hola = \"Hello World.\"\n\n$hola\n</code></pre> <p>Technically <code>write-output</code> would work:</p> <pre><code>Write-Output \"Hello World.\"\n</code></pre> <p>But it might not be best. </p>"},{"location":"lessons/06-user-manipulation/","title":"Users, Users, Users","text":"<p>One of the most common objects most of us will interact with are user accounts in Active Directory. So let\u2019s talk a little about that</p>"},{"location":"lessons/06-user-manipulation/#find-a-user","title":"Find a User","text":"<p>The cmdlet to load a user account into memory is <code>Get-ADUser</code></p>"},{"location":"lessons/06-user-manipulation/#update-a-user","title":"Update a User","text":"<p>The cmdlet to update a user account is <code>Set-ADUser</code></p>"},{"location":"lessons/06-user-manipulation/#create-a-user","title":"Create a User","text":"<p>The cmdlet to create a new user account is is <code>New-ADUser</code></p>"},{"location":"lessons/07-conditionals/","title":"If This, Then That","text":""},{"location":"lessons/08-loops/","title":"Around the World","text":""},{"location":"lessons/09-AI-as-a-Tool/","title":"AI: Not Quite Our New Overlords","text":""},{"location":"references/software-prerequisites/","title":"Software Prerequisites","text":"<p>While most of this lab uses native PowerShell and the examples can be followed using PowerShell ISE, there are more modern tools that provide a better experience all around. </p>"},{"location":"references/software-prerequisites/#visual-studio-code","title":"Visual Studio Code","text":"<p>Visual Studio Code is a modern, modular development environment maintained by Microsoft that is completely free to use. The software is cross-platform and can be run on any system. </p> <p>Through its expansive plugin library, VS Code is adaptable to almost any programming or scripting language, and can even connect remotely to many types of endpoints for easier development, debugging, or general script running. </p> <p>You can find the latest versions of VS Code for download at https://code.visualstudio.com/</p> <p>On Windows 10 and newer, you can also install this using the package manager winget:</p> <pre><code>winget install Microsoft.VisualStudioCode\n</code></pre>"},{"location":"references/software-prerequisites/#visual-studio-code-powershell-extension","title":"Visual Studio Code PowerShell Extension","text":"<p>With VS Code installed, you can now install extensions. </p> <p>To see your installed extensions, and search for new ones, open VS Code and look for the Extensions icon on the left panel (Ctrl+Shift+X).</p> <p>You will want to be certain that the PowerShell extension published by Microsoft is installed and activated.</p>"},{"location":"references/software-prerequisites/#git-for-windows","title":"Git for Windows","text":"<p>Git is the standard when it comes to Source Control. While we won\u2019t be going in depth with Git, it will be helpful for some portions of the lab (such as cloning and updating the repository as it improves.)</p> <p>You can find the latest versions of git at https://git-scm.com/</p> <p>On Windows 10 and newer, you can also install this using the package manager winget:</p> <pre><code>winget install --id Git.Git -e --source winget\n</code></pre>"},{"location":"references/software-prerequisites/#a-copy-of-this-repository","title":"A copy of this repository","text":"<p>It\u2019ll be easiest to follow along if you have access to the materials. </p> <p>You can find the repository here: https://github.com/ergostechnology/Powershell_Lab</p> <p>Of if you want to follow the spirit of the platform, open a terminal:</p> <pre><code># Make sure you are in your home directory\ncd ~\n# Create a projects directory if you don't have one\nmkdir projects\n# Move on in to that\ncd projects\n# Clone the project\ngit clone https://github.com/ergostechnology/Powershell_Lab\n</code></pre> <p>If you are already familiar with using git at the command line, you can skip to the end and just:</p> <pre><code>git clone https://github.com/ergostechnology/Powershell_Lab\n</code></pre>"}]}