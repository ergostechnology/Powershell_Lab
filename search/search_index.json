{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro to PowerShell Lab","text":"<p>An ever evolving project to try to educate and inspire.</p>"},{"location":"#hosts","title":"Hosts","text":"<ul> <li>Mason Feuhrer</li> <li>Ryan McGough</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Visual Studio Code</li> <li>PowerShell Extension for Visual Studio Code</li> <li>Git for Windows</li> <li>A copy of this repository</li> </ul> <p>Need help? Click here</p>"},{"location":"#objectives","title":"Objectives","text":"<ol> <li>What is PowerShell?</li> <li>Why PowerShell?</li> <li>The ERGOS Way</li> <li>Understanding Cmdlets</li> <li>Hello Universe</li> <li>Users, Users, Users</li> <li>Conditionals</li> <li>Loops</li> <li>AI as a Tool</li> </ol>"},{"location":"lessons/01-what-is-powershell/","title":"What is PowerShell?","text":"<p>PowerShell is a task automation and configuration management program from Microsoft, consisting of a command-line shell and the associated scripting language. Initially a Windows component only, known as Windows PowerShell, it was made open-source and cross-platform on August 18, 2016, with the introduction of PowerShell Core. <sup>1</sup></p>"},{"location":"lessons/01-what-is-powershell/#cross-platform","title":"Cross Platform","text":"<ul> <li>Every version of Windows since 7 has PowerShell by default</li> <li>The introduction of PowerShell Core brought support for macOS and Linux</li> </ul>"},{"location":"lessons/01-what-is-powershell/#command-line-shell","title":"Command-Line Shell","text":"<ul> <li>Interactive Support</li> <li>Can test as you code</li> </ul>"},{"location":"lessons/01-what-is-powershell/#scripting-language","title":"Scripting Language","text":"<ul> <li>High Level Programming Language</li> <li>Doesn\u2019t need to be compiled</li> </ul>"},{"location":"lessons/01-what-is-powershell/#task-automation","title":"Task Automation","text":"<ul> <li>Scripts can contain logical operators and functions that when performed in order perform complex tasks</li> <li>Scripts ensure uniformity; actions are take the same way every time</li> <li>Using Script Parameters, scripts can make use of variables to scale</li> </ul> <ol> <li> <p>Wikipedia \u21a9</p> </li> </ol>"},{"location":"lessons/02-why-powershell/","title":"Why PowerShell?","text":""},{"location":"lessons/02-why-powershell/#its-already-there","title":"It\u2019s Already There","text":"<p>The overwhelming majority of the devices we support are Windows based. Windows comes with PowerShell installed by default. </p> <p>It\u2019s a no-brainer.</p>"},{"location":"lessons/02-why-powershell/#its-cross-platform","title":"It\u2019s Cross-Platform","text":"<p>While there is some nuance in the differences between PowerShell 5.1 and PowerShell 6+ (Core), in general you can write scripts on any platform, and likewise run them anywhere. </p>"},{"location":"lessons/02-why-powershell/#its-object-oriented","title":"It\u2019s Object Oriented","text":"<p>Not all shell environments are created equally. PowerShell is built around .NET objects, which allows for advanced programming techniques.</p>"},{"location":"lessons/03-the-ergos-way/","title":"The ERGOS Way","text":"<p>While there are some other rules we follow when writing scripts for RMM, these are some of the standards we try to adhere to in general when writing scripts. </p>"},{"location":"lessons/03-the-ergos-way/#scripting-standards","title":"Scripting Standards","text":"<ul> <li> <p>Scripts should be written legibly, so that any amateur should be able to read your code. This means not using shortened cmdlets. Visual Studio Code will identify scenarios where your commands can be expanded, follow the advice. </p> </li> <li> <p>Document your code in-line. Having a header block at the top that explains your goal is great, but if you are not adding commentary in the same spot where complex operations take place, you are doing a disservice to the rest of the team. </p> </li> <li> <p>If an external module is needed, be sure that any and all imports are placed at the top of the script, above script purpose and documentation. Additionally, your script should test that any imported module exists/functions before calling it inside of the script.</p> </li> <li> <p>All scripts that are to be run via RMM should have an echo, Write-Host, or similar with the statement \u201c[INFO] This script has been written by ERGOS Technology Partners for execution by RMM\u201d.</p> </li> </ul> <pre><code>Write-Output \"[INFO] This script has been written by ERGOS Technology Partners for execution by RMM.\"\n</code></pre> <ul> <li> <p>Commit messages should at least attempt relevance to the work performed. </p> </li> <li> <p>If your script is meant to perform an action, it should also check that the action was successful. </p> </li> <li> <p>Generative AI is a powerful tool, especially when used in the context of scripting and programming. However, AI is not without flaw. Do not run code generated by AI without an understanding of what the code is going to do.</p> </li> </ul>"},{"location":"lessons/04-understanding-cmdlets/","title":"What the Heck is a Cmdlet?","text":"<p>There are a few words and concepts that you will want to understand before we go on. Time for the boring stuff.</p>"},{"location":"lessons/04-understanding-cmdlets/#cmdlets","title":"Cmdlets","text":"<p>Cmdlets are the verbs or action names given to the operators in PowerShell. The start of any action will begin with a cmdlet.</p> <p>Try running the following cmdlet</p> <pre><code>Update-Help\n</code></pre> <p>Nice, you fell for it. Now the local PowerShell help files on your computer should be updated with the latest information. </p>"},{"location":"lessons/04-understanding-cmdlets/#variables","title":"Variables","text":"<p>Variables are common in just about every programming language, and PowerShell is no different. </p> <p>PowerShell variables start with a dollar sign ($) and can contain strings, objects, numbers, arrays, even results of functions. </p> <pre><code>$name = \"Steve Buscemi\" # Sets the variable $name to the string \"Steve Buscemi\".\n\n$array = @('1','2','3') # Creates an array with the the values 1, 2, and 3.\n\n$processes = Get-Process # Stores a .NET object with the results of the Get-Process cmdlet into the variable $processes\n</code></pre>"},{"location":"lessons/04-understanding-cmdlets/#properties","title":"Properties","text":"<p>Properties are the parts that define an object. For instance, a user account has properties like username, e-mail address, and password. </p> <p>In object oriented programming, a property can be addressed by calling and object, and then using dot (.) notation to select specific properties of an object.</p> <pre><code>$processes = Get-Process # Store the list of running processes\n\n$processes.ProcessName # List all of the process names found in the variable\n</code></pre>"},{"location":"lessons/04-understanding-cmdlets/#the-pipeline","title":"The Pipeline","text":"<p>PowerShell makes use of a concept called \u201cThe Pipeline\u201d, which is represented by using the <code>|</code> character. This allows for the results of one function to be \u201cpiped\u201d into the next cmdlet or function.</p> <p>For example, you can grab the list of running processes on a computer, and then format that data for easier viewing by using the Format-Table function:</p> <pre><code>Get-Process | Format-Table\n</code></pre> <p>This can be handy if you don\u2019t want to store something in a variable and then retrieve the data later.</p> <p>The pipeline also allows for continued used. Following our example above, you could pick just the first ten processes, and then format the output:</p> <pre><code>Get-Process | Select-Object -First 10 | Format-Table\n</code></pre>"},{"location":"lessons/05-hello-universe/","title":"Hello Universe!","text":"<pre><code>Write-Host \"Hello World.\"\n</code></pre> <p>That\u2019s it. </p> <p>It\u2019s the first thing you learn in most programming languages. \u201cHow do I print the words \u2018Hello World.\u2019 to the screen?\u201d. </p> <p>You could make it a little more complicated:</p> <pre><code>$hola = \"Hello World.\"\n\n$hola\n</code></pre> <p>Technically <code>write-output</code> would work:</p> <pre><code>Write-Output \"Hello World.\"\n</code></pre> <p>But it might not be best. </p>"},{"location":"lessons/06-user-manipulation/","title":"Users, Users, Users","text":"<p>One of the most common objects most of us will interact with are user accounts in Active Directory. So let\u2019s talk a little about that</p>"},{"location":"lessons/06-user-manipulation/#find-a-user","title":"Find a User","text":"<p>The cmdlet to load a user account into memory is <code>Get-ADUser</code></p>"},{"location":"lessons/06-user-manipulation/#update-a-user","title":"Update a User","text":"<p>The cmdlet to update a user account is <code>Set-ADUser</code></p>"},{"location":"lessons/06-user-manipulation/#create-a-user","title":"Create a User","text":"<p>The cmdlet to create a new user account is is <code>New-ADUser</code></p>"},{"location":"lessons/07-conditionals/","title":"If This, Then That","text":"<p>One of the most common tasks in any automation is evaluating conditionals. </p> <p>Without any sort of condition, a script or command has no guard rails and would impact every item returned. </p>"},{"location":"lessons/07-conditionals/#if-what","title":"If What?","text":"<p>The basic conditional is an <code>if</code> statement. <code>If</code> asks the question \u201cdoes this criteria fit?\u201d</p> <p>Let\u2019s take a look at an imaginary user:</p> <pre><code>### This user does not actually exist\n$user = Get-ADUser mason\n\n### Use an if statement to determine if the account exists\nif ($user) {\n    Write-Host \"The user $($user.name) exists!\"\n}\n</code></pre> <p>In the above code, we first search Active Directory for a user with the username mason, and assign the results of that search to the variable $user</p> <p>In the second statement, we use <code>if</code> to begin an evaluation. The data between the parenthesis () is the data we want to evaluate. In this case, we do not need an evaluator, as the we only need to know if the account exists. By default <code>if ($variable)</code> is checking to see if the variable exists (and returns $true) or if it does not exists (which returns $null).</p> <p>If the evaluation is true, the statement allows for the cmdlet in the script block (designated by { } ) to execute. If the evaluation fails, and the user does not exist, the script continues on without performing the functions. </p>"},{"location":"lessons/07-conditionals/#what-else","title":"What else?","text":"<p><code>Else</code> and <code>elseif</code> add more functionality to a basic <code>if</code> condition. Consider a situation where you want to perform one action if the condition exists, but you want to perform a separate action if the condition is not met. Continuing on with the example from above</p> <pre><code>### This user does not actually exist\n$user = Get-ADUser mason\n\n### Use an if statement to determine if the account exists\nif ($user) {\n    Write-Host \"The user $($user.name) exists!\"\n} else {\n    Write-Host \"The user account was not found!\"\n}\n</code></pre> <p>Now, if we do not find the user account, we can print to the terminal that there is no account found. That text will only be displayed if no user account exists. </p> <p>To extend this further, what if you had more than 2 possible states for a condition to exist? Perhaps there are multiple users with the username mason (potentially an account named mason-admin could be found). You could look not just at the existence of an object or variable, but take action based on how many objects were returned:</p> <pre><code>### This user does not actually exist\n$user = Get-ADUser mason\n\n### Use an if statement to determine if the account exists\nif ($user.count -eq 1) {\n    Write-Host \"The user $($user.name) exists!\"\n} elseif ($user.count -gt 1) {\n    Write-Host \"Multiple user accounts were found: \"\n    $user.name\n} else {\n    Write-Host \"The user account was not found!\"\n}\n</code></pre>"},{"location":"lessons/08-loops/","title":"Around the World","text":""},{"location":"lessons/09-AI-as-a-Tool/","title":"AI: Not Quite Our New Overlords","text":"<p>We\u2019ve all asked ChatGPT to come up with a limerick or on the fly at least once or twice\u2026 right? Just me? Whatever. Well, it turns out that AI can be leveraged and utilized for more than just little whimsical quips and asides.</p> <p>AI, while an incredibly powerful tool is not without its faults. \u201cComputers don\u2019t blunder\u201d doesn\u2019t really work when we\u2019re talking artificial intelligence due to the very nature of the intelligence being, well, artificial. AI only knows about what it is trained to know until the model ingests new information and that\u2019s not something we\u2019re going to be diving into here. </p>"},{"location":"lessons/09-AI-as-a-Tool/#privacy","title":"Privacy","text":"<p>This is probably the most serious section, so let\u2019s get it out of the way. We absolutely NEVER, and The Rock means NEVVVVVVER, want to submit personally identifiable information that could be traced back to the company. Plain and simple, there\u2019s no room for grey (gray) areas here. I will typically substitute \u201cERGOS\u201d with \u201cACME\u201d in code that I work with; find/replace is your best friend here. </p> <p>Now that we have that out of the way and we can all agree to not leak our deepest, darkest secrets to the machines, we can move on.</p>"},{"location":"lessons/09-AI-as-a-Tool/#the-main-models","title":"The \u201cMain\u201d Models","text":"<ol> <li>OpenAI ChatGPT: https://chat.openai.com</li> <li>Microsoft Copilot: https://www.microsoft365.com/</li> <li>Google Gemini: https://gemini.google.com/</li> <li>ClaudeAI: https://claude.ai/</li> </ol> <p>At the core, all of these models are designed to do the same thing, learn. Let\u2019s see an example prompt and response from each of the models mentioned. For simplicity we will use the same prompt across all models.</p>"},{"location":"lessons/09-AI-as-a-Tool/#prompt","title":"Prompt","text":"<pre><code>Can you write me a Powershell script that will export the Windows System log to C:\\ACME\\System.evtx?\n</code></pre>"},{"location":"lessons/09-AI-as-a-Tool/#openai-chatgpt","title":"OpenAI ChatGPT","text":"<pre><code>$ExportPath = \"C:\\ACME\\System.evtx\"\n\n# Ensure the directory exists\n$ExportDirectory = Split-Path -Path $ExportPath -Parent\nif (!(Test-Path -Path $ExportDirectory)) {\n    New-Item -ItemType Directory -Path $ExportDirectory -Force | Out-Null\n}\n\n# Export the System event log\nwevtutil epl System $ExportPath\n\nWrite-Output \"System log exported to $ExportPath\"\n\n</code></pre> <p>This script:</p> <ol> <li>Defines the export path (<code>C:\\ACME\\System.evtx</code>).</li> <li>Ensures the target directory exists, creating it if necessary.</li> <li>Uses <code>wevtutil epl</code> to export the System log.</li> <li>Outputs a confirmation message.</li> </ol> <p>Let me know if you need any modifications! \ud83d\ude80</p>"},{"location":"lessons/09-AI-as-a-Tool/#microsoft-copilot","title":"Microsoft Copilot","text":"<pre><code># Define the path where the log will be exported\n$exportPath = \"C:\\ACME\\System.evtx\"\n\n# Export the System log to the specified path\nExport-EventLog -LogName System -Path $exportPath\n\nWrite-Host \"System log has been exported to $exportPath\"\n</code></pre> <p>This script sets the export path and uses the\u00a0<code>Export-EventLog</code>\u00a0cmdlet to export the System log to the specified location. If you have any questions or need further assistance, feel free to ask!</p>"},{"location":"lessons/09-AI-as-a-Tool/#google-gemini","title":"Google Gemini","text":"<pre><code># Define the output path\n$OutputPath = \"C:\\ACME\\System.evtx\"\n\n# Check if the output directory exists, create if not\n$OutputDir = Split-Path -Path $OutputPath -Parent\nif (!(Test-Path -Path $OutputDir -PathType Container)) {\n    try {\n        New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null\n    }\n    catch {\n        Write-Error \"Failed to create directory: $($OutputDir). Error: $($_.Exception.Message)\"\n        return # Exit the script if directory creation fails\n    }\n}\n\n# Export the System log\ntry {\n    Get-WinEvent -LogName System | Export-WinEvent -Path $OutputPath -Force\n    Write-Host \"System log exported successfully to: $OutputPath\"\n}\ncatch {\n    Write-Error \"Failed to export System log. Error: $($_.Exception.Message)\"\n}\n</code></pre> <p>Explanation and Important Considerations:</p> <ol> <li>Output Path:<ul> <li>The <code>$OutputPath</code> variable defines the location where the System log will be saved. Ensure that the \u201cC:\\ACME\u201d directory exists or that the script has the permissions to create it.</li> </ul> </li> <li>Directory Creation:<ul> <li>The script uses <code>Split-Path</code> to extract the directory path from <code>$OutputPath</code>.</li> <li><code>Test-Path</code> checks if the directory exists.</li> <li><code>New-Item</code> creates the directory if it doesn\u2019t exist. The <code>-Force</code> parameter suppresses any confirmation prompts.</li> <li>A <code>try...catch</code> block handles potential errors during directory creation.</li> </ul> </li> <li>Exporting the Log:<ul> <li><code>Get-WinEvent -LogName System</code> retrieves all events from the System log.</li> <li><code>Export-WinEvent -Path $OutputPath -Force</code> exports the retrieved events to the specified file. The <code>-Force</code> parameter overwrites any existing file with the same name.</li> <li>A <code>try...catch</code> block handles potential errors during the export process, such as insufficient permissions or file access issues.</li> </ul> </li> <li>Error Handling:<ul> <li>The script includes <code>try...catch</code> blocks to handle potential errors during directory creation and log export. This ensures that the script doesn\u2019t terminate unexpectedly and provides informative error messages.</li> </ul> </li> <li>Permissions:<ul> <li>Running this script might require administrator privileges, especially if you\u2019re writing to a protected location like the root of the C drive. Right-click on PowerShell and select \u201cRun as administrator\u201d to ensure you have the necessary permissions.</li> </ul> </li> <li>File Size:<ul> <li>System logs can be quite large. Be aware of the potential file size when exporting, and ensure you have sufficient disk space.</li> </ul> </li> <li>Overwriting existing files:<ul> <li>The -force parameter in the Export-WinEvent cmdlet will overwrite any existing files that share the same name as the output file. If you do not want this behavior, remove the -force parameter.</li> </ul> </li> <li>Alternative directory creation:<ul> <li>Instead of using try catch for directory creation, you could also use if(!(Test-Path -Path $OutputDir -PathType Container)){mkdir $OutputDir} which is often more readable.</li> </ul> </li> </ol>"},{"location":"lessons/09-AI-as-a-Tool/#claudeai","title":"ClaudeAI","text":"<pre><code># Script to export Windows System log to C:\\ACME\\System.evtx\n\n# Create the destination directory if it doesn't exist\nif (-not (Test-Path -Path \"C:\\ACME\" -PathType Container)) {\n    New-Item -Path \"C:\\ACME\" -ItemType Directory -Force\n    Write-Host \"Created directory: C:\\ACME\"\n}\n\n# Export the System event log\ntry {\n    wevtutil epl System \"C:\\ACME\\System.evtx\"\n    Write-Host \"Successfully exported System event log to C:\\ACME\\System.evtx\"\n} catch {\n    Write-Error \"Failed to export System event log: $_\"\n    exit 1\n}\n\n# Verify the export was successful\nif (Test-Path -Path \"C:\\ACME\\System.evtx\" -PathType Leaf) {\n    $fileInfo = Get-Item \"C:\\ACME\\System.evtx\"\n    Write-Host \"Export verified. File size: $($fileInfo.Length) bytes\"\n} else {\n    Write-Error \"Export verification failed. File not found at C:\\ACME\\System.evtx\"\n    exit 1\n}\n</code></pre> <p>You can run this script in PowerShell to export the Windows System event log to the specified location. The script:</p> <ol> <li>Creates the C:\\ACME directory if it doesn\u2019t exist</li> <li>Uses the wevtutil command to export the System log</li> <li>Verifies that the export was successful and reports the file size</li> </ol> <p>You\u2019ll need administrator privileges to run this script successfully since accessing event logs typically requires elevated permissions.</p>"},{"location":"lessons/09-AI-as-a-Tool/#bonus-prompt","title":"Bonus Prompt","text":"<pre><code>Is there a more efficient way than the following code snippet to export the System log to an evtx file in powershell? \n\n`wevtutil epl System \"C:\\Export\\System.evtx\"` \n\nI would like to avoid using an external program wevtutil.exe if possible.\n</code></pre>"},{"location":"lessons/09-AI-as-a-Tool/#powershell-experts-model-via-openai","title":"\u201cPowershell Experts Model\u201d via OpenAI","text":"<pre><code># Define the export directory and file\n$exportDir = \"C:\\ACME\"\n$exportFile = \"$exportDir\\System.evtx\"\n\n# Ensure the directory exists\nif (-not (Test-Path -Path $exportDir)) {\n\u00a0 \u00a0 New-Item -Path $exportDir -ItemType Directory -Force | Out-Null\n}\n\n# Export the System event log\n$logSession = New-Object System.Diagnostics.Eventing.Reader.EventLogSession\n$logSession.ExportLog(\"System\", [System.Diagnostics.Eventing.Reader.PathType]::LogName, \"*\", $exportFile)\nWrite-Host \"System log exported to: $exportFile\"\n</code></pre> <p>Yes! You can use PowerShell\u2019s built-in <code>Export-EventLog</code> or <code>Save-EventLog</code> (depending on your Windows version) instead of <code>wevtutil</code>. However, these cmdlets work with classic event logs, not the newer Windows Event Log system.</p> <p>For modern logs (like \u201cSystem\u201d), use <code>New-EventLogSession</code> with <code>Get-WinEvent</code> to export logs programmatically.</p> <p>Alternative using <code>Get-WinEvent</code> and <code>.SaveChanges()</code> You can use the <code>System.Diagnostics.Eventing.Reader.EventLogSession</code> class to export logs:</p>"},{"location":"lessons/09-AI-as-a-Tool/#explanation","title":"Explanation:","text":"<ul> <li><code>ExportLog</code> exports the \u201cSystem\u201d log.</li> <li><code>\"*\"</code> is a query filter (can be customized).</li> <li><code>\"C:\\Export\\System.evtx\"</code> is the output file.</li> </ul> <p>This approach eliminates dependency on <code>wevtutil.exe</code> and keeps everything within PowerShell.</p> <p>Would you like help customizing the export further, such as filtering events by time range or event ID?</p>"},{"location":"lessons/09-AI-as-a-Tool/#hands-on","title":"Hands On","text":"<ol> <li>Review the output from each AI model. <ol> <li>Does the response make sense? </li> <li>Does it match the code provided?</li> </ol> </li> <li>Attempt to execute each code block and review the results.<ol> <li>Did all the of the provided samples work?</li> <li>If any of the samples didn\u2019t work, why not? </li> </ol> </li> <li>How can the provided code samples be used in production scripts?</li> </ol>"},{"location":"lessons/09-AI-as-a-Tool/#q-a-time","title":"Q &amp; A Time","text":"<p>You\u2019ve got questions, I might have answers.</p>"},{"location":"references/software-prerequisites/","title":"Software Prerequisites","text":"<p>While most of this lab uses native PowerShell and the examples can be followed using PowerShell ISE, there are more modern tools that provide a better experience all around. </p>"},{"location":"references/software-prerequisites/#visual-studio-code","title":"Visual Studio Code","text":"<p>Visual Studio Code is a modern, modular development environment maintained by Microsoft that is completely free to use. The software is cross-platform and can be run on any system. </p> <p>Through its expansive plugin library, VS Code is adaptable to almost any programming or scripting language, and can even connect remotely to many types of endpoints for easier development, debugging, or general script running. </p> <p>You can find the latest versions of VS Code for download at https://code.visualstudio.com/</p> <p>On Windows 10 and newer, you can also install this using the package manager winget:</p> <pre><code>winget install Microsoft.VisualStudioCode\n</code></pre>"},{"location":"references/software-prerequisites/#visual-studio-code-powershell-extension","title":"Visual Studio Code PowerShell Extension","text":"<p>With VS Code installed, you can now install extensions. </p> <p>To see your installed extensions, and search for new ones, open VS Code and look for the Extensions icon on the left panel (Ctrl+Shift+X).</p> <p>You will want to be certain that the PowerShell extension published by Microsoft is installed and activated.</p>"},{"location":"references/software-prerequisites/#git-for-windows","title":"Git for Windows","text":"<p>Git is the standard when it comes to Source Control. While we won\u2019t be going in depth with Git, it will be helpful for some portions of the lab (such as cloning and updating the repository as it improves.)</p> <p>You can find the latest versions of git at https://git-scm.com/</p> <p>On Windows 10 and newer, you can also install this using the package manager winget:</p> <pre><code>winget install --id Git.Git -e --source winget\n</code></pre>"},{"location":"references/software-prerequisites/#a-copy-of-this-repository","title":"A copy of this repository","text":"<p>It\u2019ll be easiest to follow along if you have access to the materials. </p> <p>You can find the repository here: https://github.com/ergostechnology/Powershell_Lab</p> <p>Of if you want to follow the spirit of the platform, open a terminal:</p> <pre><code># Make sure you are in your home directory\ncd ~\n# Create a projects directory if you don't have one\nmkdir projects\n# Move on in to that\ncd projects\n# Clone the project\ngit clone https://github.com/ergostechnology/Powershell_Lab\n</code></pre> <p>If you are already familiar with using git at the command line, you can skip to the end and just:</p> <pre><code>git clone https://github.com/ergostechnology/Powershell_Lab\n</code></pre>"}]}